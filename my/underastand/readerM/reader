id >>= return . length :: Foldable t => t a -> Int

id >>= \l -> return $ length l :: Foldable t => t a -> Int

return . length :: (Foldable t, Monad m) => t a -> m Int

{-
instance Monad ((->) e) where
    return x = \_ -> x
    (>>=) :: (e -> a) -> (a -> (e -> b) -> (e -> b)
    (>>=) :: (e -> a) -> (a -> e -> b) -> e -> b
    m >>= k = \e -> k (m e) e
-}

id >>= \l -> return $ length l 
    => \e -> (\l -> return $ length l ) (id e) e
    => \e -> (return . length $ e) e
    => \e -> (return x) e
    => \e -> (\_ -> x) e
    => \e -> x

    \e -> (return . length $ e) e :: Foldable t => t a -> Int
    \e -> (return . length $ e) :: (Foldable t, Monad m) => t a -> m Int

    pointfree "f e =  (return . length $ e) e" --> f = length
    
    λ: (return . length $ "lol") "lol"
    3
    λ: (return . length $ "lol") "lol-lol"
    3   